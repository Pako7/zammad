host( "lib/graphql/language/lexer.rl", 1 ) @{}@host( "lib/graphql/language/lexer.rl", 122 ) @{
	
# frozen_string_literal: true
	
	module GraphQL
	module Language
	module Lexer
	def self.tokenize(query_string)
	run_lexer(query_string)
	end
	
# Replace any escaped unicode or whitespace with the _actual_ characters
# To avoid allocating more strings, this modifies the string passed into it
	def self.replace_escaped_characters_in_place(raw_string)
	raw_string.gsub!(ESCAPES, ESCAPES_REPLACE)
	raw_string.gsub!(UTF_8) do |_matched_str|
	codepoint_1 = ($1 || $2).to_i(16)
	codepoint_2 = $3
	
	if codepoint_2
	codepoint_2 = codepoint_2.to_i(16)
	if (codepoint_1 >= 0xD800 && codepoint_1 <= 0xDBFF) && # leading surrogate
	(codepoint_2 >= 0xDC00 && codepoint_2 <= 0xDFFF) # trailing surrogate
# A surrogate pair
	combined = ((codepoint_1 - 0xD800) * 0x400) + (codepoint_2 - 0xDC00) + 0x10000
	[combined].pack('U'.freeze)
	else
# Two separate code points
	[codepoint_1].pack('U'.freeze) + [codepoint_2].pack('U'.freeze)
	end
	else
	[codepoint_1].pack('U'.freeze)
	end
	end
	nil
	end
	
	private
	
}@
array char _graphql_lexer_trans_keys( 0, 49 ) = { 1, 0, 4, 22, 4, 43, 14, 47, 14, 46, 14, 46, 14, 46, 14, 46, 14, 46, 14, 46, 14, 46, 14, 49, 4, 22, 4, 4, 4, 4, 4, 22, 4, 4, 4, 4, 14, 15, 14, 15, 10, 15, 12, 12, 4, 22, 4, 43, 14, 47, 14, 46, 14, 46, 14, 46, 14, 46, 14, 46, 14, 46, 14, 46, 14, 49, 0, 49, 0, 0, 4, 22, 4, 4, 4, 4, 4, 4, 4, 22, 4, 4, 4, 4, 1, 1, 14, 15, 10, 29, 14, 15, 10, 29, 10, 29, 12, 12, 14, 46, 14, 46, 14, 46, 14, 46, 14, 46, 14, 46, 14, 46, 14, 46, 14, 46, 14, 46, 14, 46, 14, 46, 14, 46, 14, 46, 14, 46, 14, 46, 14, 46, 14, 46, 14, 46, 14, 46, 14, 46, 14, 46, 14, 46, 14, 46, 14, 46, 14, 46, 14, 46, 14, 46, 14, 46, 14, 46, 14, 46, 14, 46, 14, 46, 14, 46, 14, 46, 14, 46, 14, 46, 14, 46, 14, 46, 14, 46, 14, 46, 14, 46, 14, 46, 14, 46, 14, 46, 14, 46, 14, 46, 14, 46, 14, 46, 14, 46, 14, 46, 14, 46, 14, 46, 14, 46, 14, 46, 14, 46, 14, 46, 14, 46, 14, 46, 14, 46, 14, 46, 14, 46, 14, 46, 14, 46, 14, 46, 14, 46, 14, 46, 14, 46, 14, 46, 14, 46, 14, 46, 14, 46, 14, 46, 14, 46, 14, 46, 14, 46, 14, 46, 14, 46, 14, 46, 14, 46, 14, 46, 14, 46, 14, 46, 14, 46, 14, 46, 14, 46, 14, 46, 14, 46, 14, 46, 14, 46, 14, 46, 14, 46, 14, 46, 14, 46, 14, 46, 4, 4, 0 };

array s8 _graphql_lexer_char_class( 0, 49 ) = { 0, 1, 2, 2, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 3, 4, 5, 6, 2, 7, 2, 8, 9, 2, 10, 0, 11, 12, 13, 14, 15, 15, 15, 15, 15, 15, 15, 15, 15, 16, 2, 2, 17, 2, 2, 18, 19, 19, 19, 19, 20, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 21, 22, 23, 2, 24, 2, 25, 26, 27, 28, 29, 30, 31, 32, 33, 19, 19, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 19, 45, 46, 19, 47, 48, 49, 0 };

array s16 _graphql_lexer_index_offsets( 0, 4068 ) = { 0, 0, 19, 59, 93, 126, 159, 192, 225, 258, 291, 324, 360, 379, 380, 381, 400, 401, 402, 404, 406, 412, 413, 432, 472, 506, 539, 572, 605, 638, 671, 704, 737, 773, 823, 824, 843, 844, 845, 846, 865, 866, 867, 868, 870, 890, 892, 912, 932, 933, 966, 999, 1032, 1065, 1098, 1131, 1164, 1197, 1230, 1263, 1296, 1329, 1362, 1395, 1428, 1461, 1494, 1527, 1560, 1593, 1626, 1659, 1692, 1725, 1758, 1791, 1824, 1857, 1890, 1923, 1956, 1989, 2022, 2055, 2088, 2121, 2154, 2187, 2220, 2253, 2286, 2319, 2352, 2385, 2418, 2451, 2484, 2517, 2550, 2583, 2616, 2649, 2682, 2715, 2748, 2781, 2814, 2847, 2880, 2913, 2946, 2979, 3012, 3045, 3078, 3111, 3144, 3177, 3210, 3243, 3276, 3309, 3342, 3375, 3408, 3441, 3474, 3507, 3540, 3573, 3606, 3639, 3672, 3705, 3738, 3771, 3804, 3837, 3870, 3903, 3936, 3969, 4002, 4035, 4068, 0 };

array s16 _graphql_lexer_indices( 0, 192 ) = { 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 2, 1, 2, 5, 6, 6, 1, 1, 1, 6, 6, 1, 1, 1, 1, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 8, 8, 1, 1, 1, 8, 8, 1, 1, 1, 1, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 1, 1, 1, 9, 9, 1, 1, 1, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 2, 2, 1, 1, 1, 2, 2, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 10, 10, 1, 1, 1, 10, 10, 1, 1, 1, 1, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 11, 11, 1, 1, 1, 11, 11, 1, 1, 1, 1, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 12, 12, 1, 1, 1, 12, 12, 1, 1, 1, 1, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 13, 13, 1, 1, 1, 13, 13, 1, 1, 1, 1, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 1, 1, 1, 13, 13, 1, 1, 1, 1, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 1, 1, 2, 16, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 17, 18, 19, 20, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 17, 21, 22, 23, 23, 25, 25, 26, 26, 14, 14, 23, 23, 27, 29, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 30, 28, 0, 0, 0, 0, 0, 0, 0, 0, 28, 0, 0, 0, 0, 0, 0, 0, 0, 28, 0, 0, 0, 28, 0, 0, 0, 28, 0, 0, 0, 0, 0, 28, 0, 0, 0, 28, 0, 28, 31, 32, 32, 0, 0, 0, 32, 32, 0, 0, 0, 0, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 33, 34, 34, 0, 0, 0, 34, 34, 0, 0, 0, 0, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 35, 35, 0, 0, 0, 35, 35, 0, 0, 0, 0, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 28, 28, 0, 0, 0, 28, 28, 0, 0, 0, 0, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 36, 36, 0, 0, 0, 36, 36, 0, 0, 0, 0, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 37, 37, 0, 0, 0, 37, 37, 0, 0, 0, 0, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 38, 38, 0, 0, 0, 38, 38, 0, 0, 0, 0, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 39, 39, 0, 0, 0, 39, 39, 0, 0, 0, 0, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 0, 0, 0, 39, 39, 0, 0, 0, 0, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 0, 0, 28, 42, 43, 41, 44, 45, 46, 47, 48, 49, 50, 41, 51, 52, 41, 53, 54, 55, 56, 57, 58, 58, 59, 41, 60, 58, 58, 58, 58, 61, 62, 63, 58, 58, 64, 58, 65, 66, 67, 58, 68, 69, 70, 71, 72, 58, 58, 58, 73, 74, 75, 42, 78, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4, 15, 81, 82, 83, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 17, 84, 19, 85, 53, 54, 26, 26, 87, 86, 23, 23, 86, 86, 86, 86, 88, 86, 86, 86, 86, 86, 86, 86, 86, 88, 23, 23, 26, 26, 89, 89, 25, 25, 89, 89, 89, 89, 88, 89, 89, 89, 89, 89, 89, 89, 89, 88, 26, 26, 87, 86, 54, 54, 86, 86, 86, 86, 88, 86, 86, 86, 86, 86, 86, 86, 86, 88, 90, 58, 58, 14, 14, 14, 58, 58, 14, 14, 14, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 91, 91, 91, 58, 58, 91, 91, 91, 58, 58, 58, 58, 58, 58, 58, 58, 58, 92, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 91, 91, 91, 58, 58, 91, 91, 91, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 93, 58, 58, 58, 58, 58, 58, 58, 58, 91, 91, 91, 58, 58, 91, 91, 91, 58, 58, 58, 58, 58, 94, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 91, 91, 91, 58, 58, 91, 91, 91, 58, 58, 58, 95, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 91, 91, 91, 58, 58, 91, 91, 91, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 96, 58, 58, 58, 58, 58, 58, 91, 91, 91, 58, 58, 91, 91, 91, 58, 58, 58, 58, 58, 58, 58, 58, 58, 97, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 91, 91, 91, 58, 58, 91, 91, 91, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 98, 58, 58, 58, 58, 91, 91, 91, 58, 58, 91, 91, 91, 58, 58, 58, 58, 58, 99, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 91, 91, 91, 58, 58, 91, 91, 91, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 100, 58, 58, 58, 58, 58, 58, 58, 58, 101, 58, 58, 58, 91, 91, 91, 58, 58, 91, 91, 91, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 102, 58, 58, 58, 58, 58, 91, 91, 91, 58, 58, 91, 91, 91, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 103, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 91, 91, 91, 58, 58, 91, 91, 91, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 104, 58, 58, 58, 58, 58, 58, 91, 91, 91, 58, 58, 91, 91, 91, 58, 58, 58, 58, 58, 105, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 91, 91, 91, 58, 58, 91, 91, 91, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 106, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 91, 91, 91, 58, 58, 91, 91, 91, 58, 58, 58, 58, 107, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 91, 91, 91, 58, 58, 91, 91, 91, 58, 108, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 109, 58, 58, 58, 58, 58, 58, 58, 58, 91, 91, 91, 58, 58, 91, 91, 91, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 110, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 91, 91, 91, 58, 58, 91, 91, 91, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 111, 58, 58, 58, 58, 58, 58, 58, 91, 91, 91, 58, 58, 91, 91, 91, 58, 58, 58, 58, 58, 112, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 91, 91, 91, 58, 58, 91, 91, 91, 58, 113, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 91, 91, 91, 58, 58, 91, 91, 91, 58, 58, 58, 58, 58, 58, 58, 114, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 91, 91, 91, 58, 58, 91, 91, 91, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 115, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 91, 91, 91, 58, 58, 91, 91, 91, 58, 58, 58, 58, 58, 116, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 91, 91, 91, 58, 58, 91, 91, 91, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 117, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 91, 91, 91, 58, 58, 91, 91, 91, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 118, 58, 58, 58, 58, 58, 58, 91, 91, 91, 58, 58, 91, 91, 91, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 119, 120, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 91, 91, 91, 58, 58, 91, 91, 91, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 121, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 91, 91, 91, 58, 58, 91, 91, 91, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 122, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 91, 91, 91, 58, 58, 91, 91, 91, 58, 58, 58, 58, 58, 123, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 91, 91, 91, 58, 58, 91, 91, 91, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 124, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 91, 91, 91, 58, 58, 91, 91, 91, 58, 58, 58, 58, 58, 125, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 91, 91, 91, 58, 58, 91, 91, 91, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 126, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 91, 91, 91, 58, 58, 91, 91, 91, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 127, 58, 58, 58, 58, 58, 58, 91, 91, 91, 58, 58, 91, 91, 91, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 128, 58, 58, 58, 58, 58, 58, 58, 91, 91, 91, 58, 58, 91, 91, 91, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 129, 58, 58, 58, 130, 58, 58, 58, 58, 58, 58, 91, 91, 91, 58, 58, 91, 91, 91, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 131, 58, 58, 58, 58, 58, 91, 91, 91, 58, 58, 91, 91, 91, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 132, 58, 58, 58, 58, 58, 58, 91, 91, 91, 58, 58, 91, 91, 91, 58, 58, 58, 58, 58, 133, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 91, 91, 91, 58, 58, 91, 91, 91, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 134, 58, 58, 58, 58, 58, 58, 58, 58, 91, 91, 91, 58, 58, 91, 91, 91, 58, 58, 58, 58, 58, 58, 135, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 91, 91, 91, 58, 58, 91, 91, 91, 58, 136, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 91, 91, 91, 58, 58, 91, 91, 91, 58, 58, 58, 137, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 91, 91, 91, 58, 58, 91, 91, 91, 58, 58, 58, 58, 58, 138, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 91, 91, 91, 58, 58, 91, 91, 91, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 139, 58, 58, 58, 58, 58, 91, 91, 91, 58, 58, 91, 91, 91, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 140, 58, 58, 58, 58, 58, 58, 91, 91, 91, 58, 58, 91, 91, 91, 58, 141, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 91, 91, 91, 58, 58, 91, 91, 91, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 142, 58, 58, 58, 58, 58, 58, 91, 91, 91, 58, 58, 91, 91, 91, 58, 58, 58, 58, 58, 58, 58, 58, 58, 143, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 91, 91, 91, 58, 58, 91, 91, 91, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 144, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 91, 91, 91, 58, 58, 91, 91, 91, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 145, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 91, 91, 91, 58, 58, 91, 91, 91, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 146, 58, 58, 58, 58, 58, 91, 91, 91, 58, 58, 91, 91, 91, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 147, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 91, 91, 91, 58, 58, 91, 91, 91, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 148, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 91, 91, 91, 58, 58, 91, 91, 91, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 149, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 91, 91, 91, 58, 58, 91, 91, 91, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 150, 58, 58, 58, 58, 58, 91, 91, 91, 58, 58, 91, 91, 91, 58, 58, 58, 58, 58, 151, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 91, 91, 91, 58, 58, 91, 91, 91, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 152, 58, 58, 58, 58, 58, 58, 58, 58, 91, 91, 91, 58, 58, 91, 91, 91, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 153, 58, 58, 91, 91, 91, 58, 58, 91, 91, 91, 58, 58, 58, 58, 58, 154, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 91, 91, 91, 58, 58, 91, 91, 91, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 155, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 91, 91, 91, 58, 58, 91, 91, 91, 58, 58, 58, 58, 58, 156, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 91, 91, 91, 58, 58, 91, 91, 91, 58, 157, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 91, 91, 91, 58, 58, 91, 91, 91, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 158, 58, 58, 58, 58, 58, 58, 91, 91, 91, 58, 58, 91, 91, 91, 58, 159, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 91, 91, 91, 58, 58, 91, 91, 91, 58, 58, 160, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 91, 91, 91, 58, 58, 91, 91, 91, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 161, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 91, 91, 91, 58, 58, 91, 91, 91, 58, 58, 58, 58, 58, 162, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 91, 91, 91, 58, 58, 91, 91, 91, 58, 58, 58, 163, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 164, 58, 58, 58, 58, 58, 91, 91, 91, 58, 58, 91, 91, 91, 58, 165, 58, 58, 58, 58, 58, 58, 166, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 91, 91, 91, 58, 58, 91, 91, 91, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 167, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 91, 91, 91, 58, 58, 91, 91, 91, 58, 168, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 91, 91, 91, 58, 58, 91, 91, 91, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 169, 58, 58, 58, 58, 58, 58, 58, 58, 91, 91, 91, 58, 58, 91, 91, 91, 58, 58, 58, 58, 58, 170, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 91, 91, 91, 58, 58, 91, 91, 91, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 171, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 91, 91, 91, 58, 58, 91, 91, 91, 58, 172, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 91, 91, 91, 58, 58, 91, 91, 91, 58, 58, 173, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 91, 91, 91, 58, 58, 91, 91, 91, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 174, 58, 58, 58, 58, 58, 58, 58, 91, 91, 91, 58, 58, 91, 91, 91, 58, 58, 58, 175, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 91, 91, 91, 58, 58, 91, 91, 91, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 176, 58, 58, 58, 58, 58, 58, 58, 58, 91, 91, 91, 58, 58, 91, 91, 91, 58, 58, 58, 58, 58, 58, 58, 58, 58, 177, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 91, 91, 91, 58, 58, 91, 91, 91, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 178, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 91, 91, 91, 58, 58, 91, 91, 91, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 179, 58, 58, 58, 58, 58, 58, 91, 91, 91, 58, 58, 91, 91, 91, 58, 58, 58, 58, 58, 58, 58, 58, 58, 180, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 91, 91, 91, 58, 58, 91, 91, 91, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 181, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 91, 91, 91, 58, 58, 91, 91, 91, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 182, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 91, 91, 91, 58, 58, 91, 91, 91, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 183, 58, 58, 58, 58, 58, 184, 58, 58, 91, 91, 91, 58, 58, 91, 91, 91, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 185, 58, 58, 58, 58, 58, 91, 91, 91, 58, 58, 91, 91, 91, 58, 58, 58, 58, 58, 186, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 91, 91, 91, 58, 58, 91, 91, 91, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 187, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 91, 91, 91, 58, 58, 91, 91, 91, 58, 58, 58, 58, 58, 188, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 91, 91, 91, 58, 58, 91, 91, 91, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 189, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 91, 91, 91, 58, 58, 91, 91, 91, 58, 58, 58, 58, 58, 58, 58, 58, 58, 190, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 91, 91, 91, 58, 58, 91, 91, 91, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 191, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 91, 91, 91, 58, 58, 91, 91, 91, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 192, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 28, 0 };

array s8 _graphql_lexer_index_defaults( 0, 91 ) = { 0, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 15, 15, 15, 15, 15, 15, 14, 24, 14, 1, 28, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41, 76, 2, 79, 80, 80, 15, 15, 15, 46, 77, 86, 89, 89, 86, 77, 14, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 0, 0 };

array s16 _graphql_lexer_cond_targs( 0, 144 ) = { 0, 33, 1, 33, 2, 3, 4, 7, 5, 6, 8, 9, 10, 11, 33, 12, 13, 15, 14, 37, 16, 17, 39, 45, 33, 46, 18, 33, 22, 144, 23, 24, 25, 28, 26, 27, 29, 30, 31, 32, 33, 33, 34, 33, 33, 35, 42, 33, 33, 33, 33, 43, 48, 44, 47, 33, 33, 33, 49, 33, 33, 50, 58, 65, 75, 93, 100, 103, 104, 108, 117, 135, 140, 33, 33, 33, 33, 33, 36, 33, 33, 38, 33, 40, 41, 33, 33, 19, 20, 33, 21, 33, 51, 52, 53, 54, 55, 56, 57, 49, 59, 61, 60, 49, 62, 63, 64, 49, 66, 69, 67, 68, 49, 70, 71, 72, 73, 74, 49, 76, 84, 77, 78, 79, 80, 81, 82, 83, 49, 85, 87, 86, 49, 88, 89, 90, 91, 92, 49, 94, 95, 96, 97, 98, 99, 49, 101, 102, 49, 49, 105, 106, 107, 49, 109, 110, 111, 112, 113, 114, 115, 116, 49, 118, 125, 119, 122, 120, 121, 49, 123, 124, 49, 126, 127, 128, 129, 130, 131, 132, 133, 134, 49, 136, 138, 137, 49, 139, 49, 141, 142, 143, 49, 144, 0 };

array s8 _graphql_lexer_cond_actions( 0, 57 ) = { 0, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 6, 0, 7, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 12, 13, 14, 0, 15, 16, 17, 18, 0, 14, 19, 19, 20, 21, 22, 23, 24, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 26, 27, 28, 29, 30, 31, 32, 33, 0, 34, 4, 4, 35, 36, 0, 0, 37, 0, 38, 0, 0, 0, 0, 0, 0, 0, 39, 0, 0, 0, 40, 0, 0, 0, 41, 0, 0, 0, 0, 42, 0, 0, 0, 0, 0, 43, 0, 0, 0, 0, 0, 0, 0, 0, 0, 44, 0, 0, 0, 45, 0, 0, 0, 0, 0, 46, 0, 0, 0, 0, 0, 0, 47, 0, 0, 48, 49, 0, 0, 0, 50, 0, 0, 0, 0, 0, 0, 0, 0, 51, 0, 0, 0, 0, 0, 0, 52, 0, 0, 53, 0, 0, 0, 0, 0, 0, 0, 0, 0, 54, 0, 0, 0, 55, 0, 56, 0, 0, 0, 57, 0, 0 };

array s8 _graphql_lexer_to_state_actions( 0, 9 ) = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0 };

array s8 _graphql_lexer_from_state_actions( 0, 10 ) = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0 };

array s16 _graphql_lexer_eof_trans( 0, 194 ) = { 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 15, 15, 15, 15, 15, 15, 15, 25, 15, 2, 29, 31, 32, 33, 35, 36, 34, 37, 38, 39, 40, 41, 77, 78, 80, 81, 81, 81, 81, 81, 86, 78, 87, 90, 90, 87, 78, 15, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 194, 0 };

value int graphql_lexer_start = 33;
value int graphql_lexer_first_final = 33;
value int graphql_lexer_error = 0;

value int graphql_lexer_en_str = 144;
value int graphql_lexer_en_main = 33;

host( "lib/graphql/language/lexer.rl", 161 ) @{
	
	def self.run_lexer(query_string)
	data = query_string.unpack(PACK_DIRECTIVE)
	eof = data.length
	
# Since `Lexer` is a module, store all lexer state
# in this local variable:
	meta = {
		line: 1,
		col: 1,
		data: data,
		tokens: [],
		previous_token: nil,
	}
	
	p ||= 0
	pe ||= data.length
	
}@
{
	cs = cast(int)graphql_lexer_start;
	ts = nil;
	te = nil;
	act = 0;
}
host( "lib/graphql/language/lexer.rl", 180 ) @{
	
}@
{
	uint _trans = 0;
	index char  _keys;
	index s16  _inds;
	int _ic;
	while ( p != pe || p == eof ) {
		switch ( _graphql_lexer_from_state_actions[cs] ) {
			case 10 {
				host( "NONE", 1 ) ${${ts = p;}$}$
				
				
				
			}
		}
		
		if ( p == eof ) {
			if ( _graphql_lexer_eof_trans[cs] > 0 ) {
				_trans = cast(uint)_graphql_lexer_eof_trans[cs] - 1;
			}
		}
		else {
			_keys = offset( _graphql_lexer_trans_keys, (cs<<1) );
			_inds = offset( _graphql_lexer_indices, _graphql_lexer_index_offsets[cs] );
			
			if ( ( deref( data, p )) <= 125 && ( deref( data, p )) >= 9 ) {
				_ic = cast(int)_graphql_lexer_char_class[cast(int)( deref( data, p )) - 9];
				if ( _ic <= cast(int)deref( _graphql_lexer_trans_keys, _keys+1 ) && _ic >= cast(int)deref( _graphql_lexer_trans_keys, _keys ) )
					_trans = cast(uint)deref( _graphql_lexer_indices, _inds + cast(int)( _ic - cast(int)deref( _graphql_lexer_trans_keys, _keys ) )  ); 
				else
					_trans = cast(uint)_graphql_lexer_index_defaults[cs];
			}
			else {
				_trans = cast(uint)_graphql_lexer_index_defaults[cs];
			}
			
		}
		cs = cast(int)_graphql_lexer_cond_targs[_trans];
		
		if ( _graphql_lexer_cond_actions[_trans] != 0 ) {
			
			switch ( _graphql_lexer_cond_actions[_trans] ) {
				case 14 {
					host( "NONE", 1 ) ${${te = p+1;}$}$
					
					
					
				}
				case 8 {
					host( "lib/graphql/language/lexer.rl", 68 ) ${${te = p+1;host( "lib/graphql/language/lexer.rl", 68 ) ${ emit_string(ts, te, meta, block: false) }$}$}$
					
					
					
				}
				case 28 {
					host( "lib/graphql/language/lexer.rl", 93 ) ${${te = p+1;host( "lib/graphql/language/lexer.rl", 93 ) ${ emit(:RCURLY, ts, te, meta, "}") }$}$}$
				
				
				
			}
			case 26 {
				host( "lib/graphql/language/lexer.rl", 94 ) ${${te = p+1;host( "lib/graphql/language/lexer.rl", 94 ) ${ emit(:LCURLY, ts, te, meta, "{") }$}$}$
					
					
					
				}
				case 18 {
					host( "lib/graphql/language/lexer.rl", 95 ) ${${te = p+1;host( "lib/graphql/language/lexer.rl", 95 ) ${ emit(:RPAREN, ts, te, meta, ")") }$}$}$
					
					
					
				}
				case 17 {
					host( "lib/graphql/language/lexer.rl", 96 ) ${${te = p+1;host( "lib/graphql/language/lexer.rl", 96 ) ${ emit(:LPAREN, ts, te, meta, "(")}$}$}$
					
					
					
				}
				case 25 {
					host( "lib/graphql/language/lexer.rl", 97 ) ${${te = p+1;host( "lib/graphql/language/lexer.rl", 97 ) ${ emit(:RBRACKET, ts, te, meta, "]") }$}$}$
					
					
					
				}
				case 24 {
					host( "lib/graphql/language/lexer.rl", 98 ) ${${te = p+1;host( "lib/graphql/language/lexer.rl", 98 ) ${ emit(:LBRACKET, ts, te, meta, "[") }$}$}$
					
					
					
				}
				case 20 {
					host( "lib/graphql/language/lexer.rl", 99 ) ${${te = p+1;host( "lib/graphql/language/lexer.rl", 99 ) ${ emit(:COLON, ts, te, meta, ":") }$}$}$
					
					
					
				}
				case 2 {
					host( "lib/graphql/language/lexer.rl", 100 ) ${${te = p+1;host( "lib/graphql/language/lexer.rl", 100 ) ${ emit_string(ts, te, meta, block: false) }$}$}$
					
					
					
				}
				case 34 {
					host( "lib/graphql/language/lexer.rl", 101 ) ${${te = p+1;host( "lib/graphql/language/lexer.rl", 101 ) ${ emit_string(ts, te, meta, block: true) }$}$}$
					
					
					
				}
				case 15 {
					host( "lib/graphql/language/lexer.rl", 102 ) ${${te = p+1;host( "lib/graphql/language/lexer.rl", 102 ) ${ emit(:VAR_SIGN, ts, te, meta, "$") }$}$}$
					
					
					
				}
				case 22 {
					host( "lib/graphql/language/lexer.rl", 103 ) ${${te = p+1;host( "lib/graphql/language/lexer.rl", 103 ) ${ emit(:DIR_SIGN, ts, te, meta, "@@") }$}$}$
					
					
					
				}
				case 7 {
					host( "lib/graphql/language/lexer.rl", 104 ) ${${te = p+1;host( "lib/graphql/language/lexer.rl", 104 ) ${ emit(:ELLIPSIS, ts, te, meta, "...") }$}$}$
					
					
					
				}
				case 21 {
					host( "lib/graphql/language/lexer.rl", 105 ) ${${te = p+1;host( "lib/graphql/language/lexer.rl", 105 ) ${ emit(:EQUALS, ts, te, meta, "=") }$}$}$
					
					
					
				}
				case 13 {
					host( "lib/graphql/language/lexer.rl", 106 ) ${${te = p+1;host( "lib/graphql/language/lexer.rl", 106 ) ${ emit(:BANG, ts, te, meta, "!") }$}$}$
					
					
					
				}
				case 27 {
					host( "lib/graphql/language/lexer.rl", 107 ) ${${te = p+1;host( "lib/graphql/language/lexer.rl", 107 ) ${ emit(:PIPE, ts, te, meta, "|") }$}$}$
					
					
					
				}
				case 16 {
					host( "lib/graphql/language/lexer.rl", 108 ) ${${te = p+1;host( "lib/graphql/language/lexer.rl", 108 ) ${ emit(:AMP, ts, te, meta, "&") }$}$}$
					
					
					
				}
				case 12 {
					host( "lib/graphql/language/lexer.rl", 112 ) ${${te = p+1;host( "lib/graphql/language/lexer.rl", 112 ) ${
								meta[:line] += 1
								meta[:col] = 1
							}$}$}$
					
					
					
				}
				case 11 {
					host( "lib/graphql/language/lexer.rl", 119 ) ${${te = p+1;host( "lib/graphql/language/lexer.rl", 119 ) ${ emit(:UNKNOWN_CHAR, ts, te, meta) }$}$}$
					
					
					
				}
				case 36 {
					host( "lib/graphql/language/lexer.rl", 72 ) ${${te = p;p = p - 1;host( "lib/graphql/language/lexer.rl", 72 ) ${ emit(:INT, ts, te, meta) }$}$}$
					
					
					
				}
				case 37 {
					host( "lib/graphql/language/lexer.rl", 73 ) ${${te = p;p = p - 1;host( "lib/graphql/language/lexer.rl", 73 ) ${ emit(:FLOAT, ts, te, meta) }$}$}$
					
					
					
				}
				case 32 {
					host( "lib/graphql/language/lexer.rl", 100 ) ${${te = p;p = p - 1;host( "lib/graphql/language/lexer.rl", 100 ) ${ emit_string(ts, te, meta, block: false) }$}$}$
					
					
					
				}
				case 33 {
					host( "lib/graphql/language/lexer.rl", 101 ) ${${te = p;p = p - 1;host( "lib/graphql/language/lexer.rl", 101 ) ${ emit_string(ts, te, meta, block: true) }$}$}$
					
					
					
				}
				case 38 {
					host( "lib/graphql/language/lexer.rl", 109 ) ${${te = p;p = p - 1;host( "lib/graphql/language/lexer.rl", 109 ) ${ emit(:IDENTIFIER, ts, te, meta) }$}$}$
					
					
					
				}
				case 35 {
					host( "lib/graphql/language/lexer.rl", 110 ) ${${te = p;p = p - 1;host( "lib/graphql/language/lexer.rl", 110 ) ${ record_comment(ts, te, meta) }$}$}$
					
					
					
				}
				case 29 {
					host( "lib/graphql/language/lexer.rl", 117 ) ${${te = p;p = p - 1;host( "lib/graphql/language/lexer.rl", 117 ) ${ meta[:col] += te - ts }$}$}$
					
					
					
				}
				case 30 {
					host( "lib/graphql/language/lexer.rl", 119 ) ${${te = p;p = p - 1;host( "lib/graphql/language/lexer.rl", 119 ) ${ emit(:UNKNOWN_CHAR, ts, te, meta) }$}$}$
					
					
					
				}
				case 5 {
					host( "lib/graphql/language/lexer.rl", 72 ) ${${p = ((te))-1;
							host( "lib/graphql/language/lexer.rl", 72 ) ${ emit(:INT, ts, te, meta) }$}$}$
					
					
					
				}
				case 1 {
					host( "lib/graphql/language/lexer.rl", 119 ) ${${p = ((te))-1;
							host( "lib/graphql/language/lexer.rl", 119 ) ${ emit(:UNKNOWN_CHAR, ts, te, meta) }$}$}$
					
					
					
				}
				case 3 {
					host( "NONE", 1 ) ${${switch( act ) {
								case 2 {
									p = ((te))-1;
									host( "lib/graphql/language/lexer.rl", 72 ) ${ emit(:INT, ts, te, meta) }$ 
								}
								case 3 {
									p = ((te))-1;
									host( "lib/graphql/language/lexer.rl", 73 ) ${ emit(:FLOAT, ts, te, meta) }$ 
								}
								case 4 {
									p = ((te))-1;
									host( "lib/graphql/language/lexer.rl", 74 ) ${ emit(:ON, ts, te, meta, "on") }$ 
								}
								case 5 {
									p = ((te))-1;
									host( "lib/graphql/language/lexer.rl", 75 ) ${ emit(:FRAGMENT, ts, te, meta, "fragment") }$ 
								}
								case 6 {
									p = ((te))-1;
									host( "lib/graphql/language/lexer.rl", 76 ) ${ emit(:TRUE, ts, te, meta, "true") }$ 
								}
								case 7 {
									p = ((te))-1;
									host( "lib/graphql/language/lexer.rl", 77 ) ${ emit(:FALSE, ts, te, meta, "false") }$ 
								}
								case 8 {
									p = ((te))-1;
									host( "lib/graphql/language/lexer.rl", 78 ) ${ emit(:NULL, ts, te, meta, "null") }$ 
								}
								case 9 {
									p = ((te))-1;
									host( "lib/graphql/language/lexer.rl", 79 ) ${ emit(:QUERY, ts, te, meta, "query") }$ 
								}
								case 10 {
									p = ((te))-1;
									host( "lib/graphql/language/lexer.rl", 80 ) ${ emit(:MUTATION, ts, te, meta, "mutation") }$ 
								}
								case 11 {
									p = ((te))-1;
									host( "lib/graphql/language/lexer.rl", 81 ) ${ emit(:SUBSCRIPTION, ts, te, meta, "subscription") }$ 
								}
								case 12 {
									p = ((te))-1;
									host( "lib/graphql/language/lexer.rl", 82 ) ${ emit(:SCHEMA, ts, te, meta) }$ 
								}
								case 13 {
									p = ((te))-1;
									host( "lib/graphql/language/lexer.rl", 83 ) ${ emit(:SCALAR, ts, te, meta) }$ 
								}
								case 14 {
									p = ((te))-1;
									host( "lib/graphql/language/lexer.rl", 84 ) ${ emit(:TYPE, ts, te, meta) }$ 
								}
								case 15 {
									p = ((te))-1;
									host( "lib/graphql/language/lexer.rl", 85 ) ${ emit(:EXTEND, ts, te, meta) }$ 
								}
								case 16 {
									p = ((te))-1;
									host( "lib/graphql/language/lexer.rl", 86 ) ${ emit(:IMPLEMENTS, ts, te, meta) }$ 
								}
								case 17 {
									p = ((te))-1;
									host( "lib/graphql/language/lexer.rl", 87 ) ${ emit(:INTERFACE, ts, te, meta) }$ 
								}
								case 18 {
									p = ((te))-1;
									host( "lib/graphql/language/lexer.rl", 88 ) ${ emit(:UNION, ts, te, meta) }$ 
								}
								case 19 {
									p = ((te))-1;
									host( "lib/graphql/language/lexer.rl", 89 ) ${ emit(:ENUM, ts, te, meta) }$ 
								}
								case 20 {
									p = ((te))-1;
									host( "lib/graphql/language/lexer.rl", 90 ) ${ emit(:INPUT, ts, te, meta) }$ 
								}
								case 21 {
									p = ((te))-1;
									host( "lib/graphql/language/lexer.rl", 91 ) ${ emit(:DIRECTIVE, ts, te, meta) }$ 
								}
								case 22 {
									p = ((te))-1;
									host( "lib/graphql/language/lexer.rl", 92 ) ${ emit(:REPEATABLE, ts, te, meta, "repeatable") }$ 
								}
								case 30 {
									p = ((te))-1;
									host( "lib/graphql/language/lexer.rl", 100 ) ${ emit_string(ts, te, meta, block: false) }$ 
								}
								case 31 {
									p = ((te))-1;
									host( "lib/graphql/language/lexer.rl", 101 ) ${ emit_string(ts, te, meta, block: true) }$ 
								}
								case 39 {
									p = ((te))-1;
									host( "lib/graphql/language/lexer.rl", 109 ) ${ emit(:IDENTIFIER, ts, te, meta) }$ 
								}
							}}$
					}$
					
					
					
				}
				case 19 {
					host( "NONE", 1 ) ${${te = p+1;}$}$
					
					host( "lib/graphql/language/lexer.rl", 72 ) ${${act = 2;}$}$
					
					
					
				}
				case 6 {
					host( "NONE", 1 ) ${${te = p+1;}$}$
					
					host( "lib/graphql/language/lexer.rl", 73 ) ${${act = 3;}$}$
					
					
					
				}
				case 49 {
					host( "NONE", 1 ) ${${te = p+1;}$}$
					
					host( "lib/graphql/language/lexer.rl", 74 ) ${${act = 4;}$}$
					
					
					
				}
				case 43 {
					host( "NONE", 1 ) ${${te = p+1;}$}$
					
					host( "lib/graphql/language/lexer.rl", 75 ) ${${act = 5;}$}$
					
					
					
				}
				case 55 {
					host( "NONE", 1 ) ${${te = p+1;}$}$
					
					host( "lib/graphql/language/lexer.rl", 76 ) ${${act = 6;}$}$
					
					
					
				}
				case 42 {
					host( "NONE", 1 ) ${${te = p+1;}$}$
					
					host( "lib/graphql/language/lexer.rl", 77 ) ${${act = 7;}$}$
					
					
					
				}
				case 48 {
					host( "NONE", 1 ) ${${te = p+1;}$}$
					
					host( "lib/graphql/language/lexer.rl", 78 ) ${${act = 8;}$}$
					
					
					
				}
				case 50 {
					host( "NONE", 1 ) ${${te = p+1;}$}$
					
					host( "lib/graphql/language/lexer.rl", 79 ) ${${act = 9;}$}$
					
					
					
				}
				case 47 {
					host( "NONE", 1 ) ${${te = p+1;}$}$
					
					host( "lib/graphql/language/lexer.rl", 80 ) ${${act = 10;}$}$
					
					
					
				}
				case 54 {
					host( "NONE", 1 ) ${${te = p+1;}$}$
					
					host( "lib/graphql/language/lexer.rl", 81 ) ${${act = 11;}$}$
					
					
					
				}
				case 53 {
					host( "NONE", 1 ) ${${te = p+1;}$}$
					
					host( "lib/graphql/language/lexer.rl", 82 ) ${${act = 12;}$}$
					
					
					
				}
				case 52 {
					host( "NONE", 1 ) ${${te = p+1;}$}$
					
					host( "lib/graphql/language/lexer.rl", 83 ) ${${act = 13;}$}$
					
					
					
				}
				case 56 {
					host( "NONE", 1 ) ${${te = p+1;}$}$
					
					host( "lib/graphql/language/lexer.rl", 84 ) ${${act = 14;}$}$
					
					
					
				}
				case 41 {
					host( "NONE", 1 ) ${${te = p+1;}$}$
					
					host( "lib/graphql/language/lexer.rl", 85 ) ${${act = 15;}$}$
					
					
					
				}
				case 44 {
					host( "NONE", 1 ) ${${te = p+1;}$}$
					
					host( "lib/graphql/language/lexer.rl", 86 ) ${${act = 16;}$}$
					
					
					
				}
				case 46 {
					host( "NONE", 1 ) ${${te = p+1;}$}$
					
					host( "lib/graphql/language/lexer.rl", 87 ) ${${act = 17;}$}$
					
					
					
				}
				case 57 {
					host( "NONE", 1 ) ${${te = p+1;}$}$
					
					host( "lib/graphql/language/lexer.rl", 88 ) ${${act = 18;}$}$
					
					
					
				}
				case 40 {
					host( "NONE", 1 ) ${${te = p+1;}$}$
					
					host( "lib/graphql/language/lexer.rl", 89 ) ${${act = 19;}$}$
					
					
					
				}
				case 45 {
					host( "NONE", 1 ) ${${te = p+1;}$}$
					
					host( "lib/graphql/language/lexer.rl", 90 ) ${${act = 20;}$}$
					
					
					
				}
				case 39 {
					host( "NONE", 1 ) ${${te = p+1;}$}$
					
					host( "lib/graphql/language/lexer.rl", 91 ) ${${act = 21;}$}$
					
					
					
				}
				case 51 {
					host( "NONE", 1 ) ${${te = p+1;}$}$
					
					host( "lib/graphql/language/lexer.rl", 92 ) ${${act = 22;}$}$
					
					
					
				}
				case 31 {
					host( "NONE", 1 ) ${${te = p+1;}$}$
					
					host( "lib/graphql/language/lexer.rl", 100 ) ${${act = 30;}$}$
					
					
					
				}
				case 4 {
					host( "NONE", 1 ) ${${te = p+1;}$}$
					
					host( "lib/graphql/language/lexer.rl", 101 ) ${${act = 31;}$}$
					
					
					
				}
				case 23 {
					host( "NONE", 1 ) ${${te = p+1;}$}$
					
					host( "lib/graphql/language/lexer.rl", 109 ) ${${act = 39;}$}$
					
					
					
				}
			}
			
		}
		
		if ( p == eof ) {
			if ( cs >= 33 )
				break;
		}
		else {
			switch ( _graphql_lexer_to_state_actions[cs] ) {
				case 9 {
					host( "NONE", 1 ) ${${ts = nil;}$}$
					
					
					
				}
			}
			
			if ( cs != 0 ) {
				p += 1;
				continue;
			}
		}
		break;
	}
}
host( "lib/graphql/language/lexer.rl", 182 ) @{
	
	meta[:tokens]
	end
	
	def self.record_comment(ts, te, meta)
	token = [
	:COMMENT,
	meta[:line],
	meta[:col],
	meta[:data][ts, te - ts].pack(PACK_DIRECTIVE).force_encoding(UTF_8_ENCODING),
	meta[:previous_token],
	]
	
	meta[:previous_token] = token
	
	meta[:col] += te - ts
	end
	
	def self.emit(token_name, ts, te, meta, token_value = nil)
	token_value ||= meta[:data][ts, te - ts].pack(PACK_DIRECTIVE).force_encoding(UTF_8_ENCODING)
	meta[:tokens] << token = [
	token_name,
	meta[:line],
	meta[:col],
	token_value,
	meta[:previous_token],
	]
	meta[:previous_token] = token
# Bump the column counter for the next token
	meta[:col] += te - ts
	end
	
	ESCAPES = /\\["\\\/bfnrt]/
	ESCAPES_REPLACE = {
		'\\"' => '"',
		"\\\\" => "\\",
		"\\/" => '/',
		"\\b" => "\b",
		"\\f" => "\f",
		"\\n" => "\n",
		"\\r" => "\r",
		"\\t" => "\t",
	}
	
	UTF_8 = /\\u(?:([\dAa-f]{4})|\{([\da-f]{4,})\})(?:\\u([\dAa-f]{4}))?/i
	
	
	VALID_STRING = /\A(?:[^\\]|#{ESCAPES}|#{UTF_8})*\z/o
	
	PACK_DIRECTIVE = "c*"
	UTF_8_ENCODING = "UTF-8"
	
	def self.emit_string(ts, te, meta, block:)
	quotes_length = block ? 3 : 1
	value = meta[:data][ts + quotes_length, te - ts - 2 * quotes_length].pack(PACK_DIRECTIVE).force_encoding(UTF_8_ENCODING) || ''
	line_incr = 0
	if block && !value.empty?
	line_incr = value.count("\n")
	value = GraphQL::Language::BlockString.trim_whitespace(value)
	end
	
	if !value.valid_encoding? || !value.match?(VALID_STRING)
	meta[:tokens] << token = [
	:BAD_UNICODE_ESCAPE,
	meta[:line],
	meta[:col],
	value,
	meta[:previous_token],
	]
	else
	replace_escaped_characters_in_place(value)
	
	if !value.valid_encoding?
	meta[:tokens] << token = [
	:BAD_UNICODE_ESCAPE,
	meta[:line],
	meta[:col],
	value,
	meta[:previous_token],
	]
	else
	meta[:tokens] << token = [
	:STRING,
	meta[:line],
	meta[:col],
	value,
	meta[:previous_token],
	]
	end
	end
	
	meta[:previous_token] = token
	meta[:col] += te - ts
	meta[:line] += line_incr
	end
	end
	end
	end
}@